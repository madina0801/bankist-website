'use strict';
const btnScrollTo = document.querySelector('.btn--scroll-to');
const section1 = document.querySelector('#section--1');
const modal = document.querySelector('.modal');
const overlay = document.querySelector('.overlay');
const btnCloseModal = document.querySelector('.btn--close-modal');
const btnsOpenModal = document.querySelectorAll('.btn--show-modal');

///////////////////////////////////////
// Modal window

const header = document.querySelector('.header');

const openModal = function (e) {
  e.preventDefault();
  modal.classList.remove('hidden');
  overlay.classList.remove('hidden');
};

const closeModal = function (e) {
  // e.preventDefault();
  modal.classList.add('hidden');
  overlay.classList.add('hidden');
};

btnsOpenModal.forEach(btn => btn.addEventListener('click', openModal));

btnCloseModal.addEventListener('click', closeModal);
overlay.addEventListener('click', closeModal);

document.addEventListener('keydown', function (e) {
  if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
    closeModal();
  }
});

// Smooth Scrolling

btnScrollTo.addEventListener('click', function(e) {
  // Scrolling - Modern way
  section1.scrollIntoView({behavior: 'smooth'});

  // Old Way
  /*
  const s1coords = section1.getBoundingClientRect();
  window.scrollTo({
    left: s1coords.left + window.pageXOffset, 
    top: s1coords.top + window.pageYOffset,
    behavior: 'smooth',
  });
  */

  // console.log(s1coords);

  // console.log(e.target.getBoundingClientRect());

  // console.log('Current scroll(X/Y)', window.pageXOffset, window.pageYOffset);

  // console.log('height/width viewport', document.documentElement.clientHeight, document.documentElement.clientWidth);
})

///////////////////////////////////////////////// Page Navigation

// Event Delegations:
// 1. Add event listener to common parent elements
// 2. Determine what element originated the event

document.querySelector('.nav__links').addEventListener('click', function(e) {
  console.log(e.target);

  // Matching strategy
  if(e.target.classList.contains('nav__link')) {
    e.preventDefault();
    const id = e.target.getAttribute('href');
    document.querySelector(id).scrollIntoView({
      behavior: 'smooth'
    })
  }
})









/*
// Cookie message

const message = document.createElement('div');
message.classList.add('cookie-message');
// message.textContent = 'We use cookies for improved functionality.';
message.innerHTML = 'We use cookies for improved functionality and analytics. <button class="btn btn--close--cookie">Got it!</button>';

header.append(message);
// header.prepend(message.cloneNode(true)); // clone an element

// Close cookie message

document.querySelector('.btn--close--cookie').addEventListener('click', function() {
  message.remove();
})

/*
// Smooth Scrolling

const btnScrollTo = document.querySelector('.btn--scroll-to');
const section1 = document.querySelector('#section--1');

btnScrollTo.addEventListener('click', function(e) {
  // Scrolling - Modern way
  section1.scrollIntoView({behavior: 'smooth'});


  // Old Way
  /*
  const s1coords = section1.getBoundingClientRect();
  window.scrollTo({
    left: s1coords.left + window.pageXOffset, 
    top: s1coords.top + window.pageYOffset,
    behavior: 'smooth',
  });
  */

  // console.log(s1coords);

  // console.log(e.target.getBoundingClientRect());

  // console.log('Current scroll(X/Y)', window.pageXOffset, window.pageYOffset);

  // console.log('height/width viewport', document.documentElement.clientHeight, document.documentElement.clientWidth);
// })

/*
// An event is basically a signal that is generated by a certain DOME Node. And a signal means that something has happened, for example click somewhere or the mouse moving.

const h1 = document.querySelector('h1');

const alertH1 = function(e) {
  alert('addEventListener: heading');

  // Remove event listener
  // h1.removeEventListener('mouseenter', alertH1);
}

h1.addEventListener('mouseenter', alertH1);

setTimeout(() => h1.removeEventListener('mouseenter', alertH1), 3000);



// Adding events using on
// h1.onmouseenter = function(e) {
//   alert('onmouseenter: heading')
// }

const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)
const randomColor = () => `rgb(${randomInt(0, 255)}, ${randomInt(0, 255)}, ${randomInt(0, 255)})`;

document.querySelector('.nav__link').addEventListener('click', function(e) {
  this.style.backgroundColor = randomColor();
  console.log('link', e.target, e.currentTarget);

  // Stop Event Propagation
  // e.stopPropagation();
})

document.querySelector('.nav__links').addEventListener('click', function(e) {
  this.style.backgroundColor = randomColor();
  console.log('container', e.target, e.currentTarget);
})

document.querySelector('.nav').addEventListener('click', function(e) {
  this.style.backgroundColor = randomColor();
  console.log('nav', e.target, e.currentTarget);
}, true); // if we add the third argument to addEventListener to "true", then event handlers would no longer listen to bubbling events, but to capturing events

*/


// THEORY LECTURES

/*
const header = document.querySelector('.header');

const allButtons = document.getElementsByTagName('button'); // returns automatically updated collection of html elements

// Creating and inserting elements
// .insertAdjacentHTML

// Styles
message.style.backgroundColor = '#37383d';
message.style.width = '110%';

console.log(getComputedStyle(message).color);

// message.style.height = Number.parseFloat(getComputedStyle(message).height, 10) + 30 + 'px';
// console.log(message.style.height);

// document.documentElement.style.setProperty('--color-primary', 'orangered');

// Attributes. You can't access not-standard HTML properties
const logo = document.querySelector('.nav__logo');
console.log(logo.src);
console.log(logo.alt);
console.log(logo.className);

// How to change properties values
logo.alt = 'Minimalist logo';
console.log(logo.alt);

// How to access not standard HTML properties
// console.log(logo.getAttribute('designer'));

// Data Attributes data-
console.log(logo.dataset.versionNumber);

// Classes
// logo.classList.add();
// logo.classList.remove();
// logo.classList.toggle();
// logo.classList.contains();

// Change class name. Don't use it, cause it overwrites all of the existing classes and allows us have only one class on any element

// logo.className = 'name';
// console.log(logo.className); // name
*/